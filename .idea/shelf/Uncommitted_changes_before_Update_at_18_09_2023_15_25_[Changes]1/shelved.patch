Index: frontend/src/components/Login/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {useEffect, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport shiftLogo from \"../images/shiftLogo.jpg\";\r\nimport {UserLogIn} from \"redux/reducers/LoginSlice\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {ToastContainer, toast} from \"react-toastify\";\r\nimport {useForm, Controller} from \"react-hook-form\";\r\nimport PhoneInput from \"react-phone-number-input\";\r\nimport {CgSpinner} from \"react-icons/cg\";\r\nimport instance from \"../utils/config/instance\";\r\n\r\nfunction Index() {\r\n    const {isLoading, error} = useSelector((state) => state.login);\r\n    const dispatch = useDispatch();\r\n    const [showPassword, setShowPassword] = useState(false);\r\n\r\n    const handleTogglePassword = () => {\r\n        setShowPassword(!showPassword);\r\n    };\r\n\r\n    const navigate = useNavigate();\r\n    const {\r\n        handleSubmit,\r\n        control,\r\n        formState: {errors}\r\n    } = useForm();\r\n    useEffect(() => {\r\n        async function check() {\r\n            const res = await instance(\"/api/v1/security\", \"GET\");\r\n            if (!res.error) {\r\n                navigate(\"/dashboard\")\r\n            }\r\n        }\r\n\r\n        check()\r\n    }, [])\r\n    const loginUser = (formData) => {\r\n        if (formData.phone.startsWith(\"+998\")) {\r\n            if (formData.phone.length === 13) {\r\n                if (formData.password.length >= 8) {\r\n                    dispatch(UserLogIn({formData, navigate}));\r\n                } else {\r\n                    toast.error(\r\n                        \"Password should be at least 8 characters long for secure\"\r\n                    );\r\n                }\r\n            } else {\r\n                toast.error(\"Phone number must be 13 digits like +998 XX XXX-XX-XX\");\r\n            }\r\n        } else {\r\n            toast.error(\"Please choose Uzbekistan\");\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        if (error) {\r\n            toast.error(error);\r\n        }\r\n    }, [error]);\r\n    useEffect(() => {\r\n        async function check() {\r\n            const res = await instance(\"/api/v1/security\", \"GET\");\r\n            if (!res.error) {\r\n                navigate(\"/dashboard\")\r\n            }\r\n        }\r\n        check()\r\n    }, [])\r\n    return (\r\n        <div className='Father-Login'>\r\n            <ToastContainer/>\r\n            <div className='Login-box'>\r\n                <div>\r\n                    <img\r\n                        className='shiftLogo'\r\n                        src={shiftLogo}\r\n                        width={100}\r\n                        height={100}\r\n                        alt=''\r\n                    />\r\n                </div>\r\n                <div className='body'>\r\n                    <div>\r\n                        <p className='information'>\r\n                            We improve the process-your distribution\r\n                        </p>\r\n                    </div>\r\n                    <form onSubmit={handleSubmit(loginUser)}>\r\n                        <div>\r\n                            <Controller\r\n                                name='phone'\r\n                                control={control}\r\n                                defaultValue='+998'\r\n                                rules={{required: \"Phone Number is required\"}}\r\n                                render={({field}) => (\r\n                                    <div className='my-3 '>\r\n                                        <PhoneInput\r\n                                            {...field}\r\n                                            defaultCountry='UZ'\r\n                                            limitMaxLength={true}\r\n                                            placeholder='+998'\r\n                                        />\r\n                                        {errors.phone && (\r\n                                            <p className='error-message'>{errors.phone.message}!</p>\r\n                                        )}\r\n                                    </div>\r\n                                )}\r\n                            />\r\n\r\n                            <Controller\r\n                                name='password'\r\n                                control={control}\r\n                                defaultValue=''\r\n                                rules={{required: \"Password is required\"}}\r\n                                render={({field}) => (\r\n                                    <div className='my-3 d-flex input-group align-items-center'>\r\n                                        <input\r\n                                            {...field}\r\n                                            placeholder='Password'\r\n                                            type={showPassword ? 'text' : 'password'}\r\n                                            className='form-control my-1'\r\n                                        />\r\n                                        <button\r\n                                            className='btn btn-outline-secondary h-75'\r\n                                            type='button'\r\n                                            onClick={handleTogglePassword}\r\n                                        >\r\n                                            <i className={`bi ${showPassword ? 'bi-eye-slash' : 'bi-eye'}`}></i>\r\n                                        </button>\r\n                                        {errors.password && (\r\n                                            <p className='error-message'>\r\n                                                {errors.password.message}!\r\n                                            </p>\r\n                                        )}\r\n                                    </div>\r\n                                )}\r\n                            />\r\n                            <div>\r\n                                <p className='information'>Shift Academy</p>\r\n                            </div>\r\n\r\n                            <div className='d-flex justify-content-start align-items-center my-2'>\r\n                                <label className='ml-2'>\r\n                                    <Controller\r\n                                        name='rememberMe'\r\n                                        control={control}\r\n                                        defaultValue={false}\r\n                                        render={({field}) => (\r\n                                            <>\r\n                                                <input {...field} type='checkbox'/>\r\n                                                Remember me\r\n                                            </>\r\n                                        )}\r\n                                    />\r\n                                </label>\r\n                            </div>\r\n\r\n                            <button\r\n                                className='w-100 btn btn-lg btn btn-success mt-2'\r\n                                type='submit'\r\n                                disabled={isLoading}\r\n                            >\r\n                                {isLoading ? (\r\n                                    <CgSpinner className='animate-spin' size={30}/>\r\n                                ) : (\r\n                                    \"Login\"\r\n                                )}\r\n                            </button>\r\n                            <hr/>\r\n                            <div className='Support-service'>\r\n                                <p>Support service: +998 94 121-00-41</p>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Index;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/components/Login/index.js b/frontend/src/components/Login/index.js
--- a/frontend/src/components/Login/index.js	
+++ b/frontend/src/components/Login/index.js	
@@ -1,4 +1,4 @@
-import {useEffect, useState} from "react";
+import React, {useEffect, useState} from "react";
 import {useDispatch, useSelector} from "react-redux";
 import shiftLogo from "../images/shiftLogo.jpg";
 import {UserLogIn} from "redux/reducers/LoginSlice";
@@ -8,6 +8,8 @@
 import PhoneInput from "react-phone-number-input";
 import {CgSpinner} from "react-icons/cg";
 import instance from "../utils/config/instance";
+import {HiEyeSlash} from "react-icons/hi2";
+import {AiOutlineEye, AiOutlineEyeInvisible} from "react-icons/ai";
 
 function Index() {
     const {isLoading, error} = useSelector((state) => state.login);
@@ -24,16 +26,6 @@
         control,
         formState: {errors}
     } = useForm();
-    useEffect(() => {
-        async function check() {
-            const res = await instance("/api/v1/security", "GET");
-            if (!res.error) {
-                navigate("/dashboard")
-            }
-        }
-
-        check()
-    }, [])
     const loginUser = (formData) => {
         if (formData.phone.startsWith("+998")) {
             if (formData.phone.length === 13) {
@@ -56,124 +48,236 @@
             toast.error(error);
         }
     }, [error]);
-    useEffect(() => {
-        async function check() {
-            const res = await instance("/api/v1/security", "GET");
-            if (!res.error) {
-                navigate("/dashboard")
-            }
-        }
-        check()
-    }, [])
+    // useEffect(() => {
+    //     async function check() {
+    //         const res = await instance("/api/v1/security", "GET");
+    //         if (!res.error) {
+    //             navigate("/dashboard")
+    //         }
+    //     }
+    //
+    //     check()
+    // }, [])
     return (
-        <div className='Father-Login'>
-            <ToastContainer/>
-            <div className='Login-box'>
-                <div>
-                    <img
-                        className='shiftLogo'
-                        src={shiftLogo}
-                        width={100}
-                        height={100}
-                        alt=''
-                    />
-                </div>
-                <div className='body'>
-                    <div>
-                        <p className='information'>
-                            We improve the process-your distribution
-                        </p>
-                    </div>
-                    <form onSubmit={handleSubmit(loginUser)}>
-                        <div>
-                            <Controller
-                                name='phone'
-                                control={control}
-                                defaultValue='+998'
-                                rules={{required: "Phone Number is required"}}
-                                render={({field}) => (
-                                    <div className='my-3 '>
-                                        <PhoneInput
-                                            {...field}
-                                            defaultCountry='UZ'
-                                            limitMaxLength={true}
-                                            placeholder='+998'
-                                        />
-                                        {errors.phone && (
-                                            <p className='error-message'>{errors.phone.message}!</p>
-                                        )}
-                                    </div>
-                                )}
-                            />
-
-                            <Controller
-                                name='password'
-                                control={control}
-                                defaultValue=''
-                                rules={{required: "Password is required"}}
-                                render={({field}) => (
-                                    <div className='my-3 d-flex input-group align-items-center'>
-                                        <input
-                                            {...field}
-                                            placeholder='Password'
-                                            type={showPassword ? 'text' : 'password'}
-                                            className='form-control my-1'
-                                        />
-                                        <button
-                                            className='btn btn-outline-secondary h-75'
-                                            type='button'
-                                            onClick={handleTogglePassword}
-                                        >
-                                            <i className={`bi ${showPassword ? 'bi-eye-slash' : 'bi-eye'}`}></i>
-                                        </button>
-                                        {errors.password && (
-                                            <p className='error-message'>
-                                                {errors.password.message}!
-                                            </p>
-                                        )}
-                                    </div>
-                                )}
-                            />
-                            <div>
-                                <p className='information'>Shift Academy</p>
+        // <div className='Father-Login'>
+        //     <ToastContainer/>
+        //     <div className='Login-box'>
+        //         <div>
+        //             <img
+        //                 className='shiftLogo'
+        //                 src={shiftLogo}
+        //                 width={100}
+        //                 height={100}
+        //                 alt=''
+        //             />
+        //         </div>
+        //         <div className='body'>
+        //             <div>
+        //                 <p className='information'>
+        //                     We improve the process-your distribution
+        //                 </p>
+        //             </div>
+        //             <form onSubmit={handleSubmit(loginUser)}>
+        //                 <div>
+        //                     <Controller
+        //                         name='phone'
+        //                         control={control}
+        //                         defaultValue='+998'
+        //                         rules={{required: "Phone Number is required"}}
+        //                         render={({field}) => (
+        //                             <div className='my-3 '>
+        //                                 <PhoneInput
+        //                                     {...field}
+        //                                     defaultCountry='UZ'
+        //                                     limitMaxLength={true}
+        //                                     placeholder='+998'
+        //                                 />
+        //                                 {errors.phone && (
+        //                                     <p className='error-message'>{errors.phone.message}!</p>
+        //                                 )}
+        //                             </div>
+        //                         )}
+        //                     />
+        //
+        //                     <Controller
+        //                         name='password'
+        //                         control={control}
+        //                         defaultValue=''
+        //                         rules={{required: "Password is required"}}
+        //                         render={({field}) => (
+        //                             <div className='my-3 d-flex input-group align-items-center'>
+        //                                 <input
+        //                                     {...field}
+        //                                     placeholder='Password'
+        //                                     type={showPassword ? 'text' : 'password'}
+        //                                     className='form-control my-1'
+        //                                 />
+        //                                 <button
+        //                                     className='btn btn-outline-secondary h-75'
+        //                                     type='button'
+        //                                     onClick={handleTogglePassword}
+        //                                 >
+        //                                     <i className={`bi ${showPassword ? 'bi-eye-slash' : 'bi-eye'}`}></i>
+        //                                 </button>
+        //                                 {errors.password && (
+        //                                     <p className='error-message'>
+        //                                         {errors.password.message}!
+        //                                     </p>
+        //                                 )}
+        //                             </div>
+        //                         )}
+        //                     />
+        //                     <div>
+        //                         <p className='information'>Shift Academy</p>
+        //                     </div>
+        //
+        //                     <div className='d-flex justify-content-start align-items-center my-2'>
+        //                         <label className='ml-2'>
+        //                             <Controller
+        //                                 name='rememberMe'
+        //                                 control={control}
+        //                                 defaultValue={false}
+        //                                 render={({field}) => (
+        //                                     <>
+        //                                         <input {...field} type='checkbox'/>
+        //                                         Remember me
+        //                                     </>
+        //                                 )}
+        //                             />
+        //                         </label>
+        //                     </div>
+        //
+        //                     <button
+        //                         className='border w-100'
+        //                         type='submit'
+        //                         disabled={isLoading}
+        //                     >
+        //                         {isLoading ? (
+        //                             <CgSpinner className='animate-spin' size={30}/>
+        //                         ) : (
+        //                             "Login"
+        //                         )}
+        //                     </button>
+        //                     <hr/>
+        //                     <div className='Support-service'>
+        //                         <p>Support service: +998 94 121-00-41</p>
+        //                     </div>
+        //                 </div>
+        //             </form>
+        //         </div>
+        //     </div>
+        // </div>
+
+        <section className="bg-gray-50 dark:bg-gray-900">
+            <div className="flex flex-col items-center justify-center px-6 py-8 mx-auto md:h-screen lg:py-0">
+                <div
+                    className="w-full bg-white rounded-lg shadow dark:border md:mt-0 sm:max-w-md xl:p-0 dark:bg-gray-800 dark:border-gray-700">
+                    <div className="p-6 space-y-4 md:space-y-6 sm:p-8">
+                        <h1 className="text-xl font-bold leading-tight tracking-tight text-gray-900 md:text-2xl dark:text-white">
+                            Sign in to your account
+                        </h1>
+                        <form className="space-y-4 md:space-y-6" onSubmit={handleSubmit(loginUser)}>
+                            <div>
+                                <label htmlFor="phone"
+                                       className="block mb-1 text-sm font-medium text-gray-900 dark:text-white">
+                                    Phone</label>
+                                <Controller
+                                    name='phone'
+                                    control={control}
+                                    // defaultValue='+998'
+                                    rules={{required: "Phone Number is required"}}
+                                    render={({field}) => (
+                                        <div>
+                                            <PhoneInput
+                                                id={"phone"}
+                                                {...field}
+                                                defaultCountry='UZ'
+                                                limitMaxLength={true}
+                                                placeholder='+998'
+                                            />
+                                            {errors.phone && (
+                                                <p className='error-message'>{errors.phone.message}!</p>
+                                            )}
+                                        </div>
+                                    )}
+                                />
+                            </div>
+                            <div>
+                                <label htmlFor="password"
+                                       className="block mb-1 text-sm font-medium text-gray-900 dark:text-white">Password</label>
+                                <Controller
+                                    name='password'
+                                    control={control}
+                                    defaultValue=''
+                                    rules={{required: "Password is required"}}
+                                    render={({field}) => (
+                                        <div className=' d-flex input-group align-items-center'>
+                                            <input
+                                                {...field}
+                                                id={"password"}
+                                                placeholder="••••••••"
+                                                type={showPassword ? 'text' : 'password'}
+                                                className='form-control my-1'
+
+                                            />
+                                            <button
+                                                className='btn bg-gray-300 border  h-[40px]'
+                                                type='button'
+                                                onClick={handleTogglePassword}
+                                            >
+                                                {
+                                                    showPassword ? <AiOutlineEye color={"black"}/> :
+                                                        <AiOutlineEyeInvisible color={"black"}/>
+                                                }
+                                            </button>
+                                        </div>
+
+                                    )}
+
+                                />
+                                {errors.password && (
+                                    <p className='error-message'>
+                                        {errors.password.message}!
+                                    </p>
+                                )}
                             </div>
-
-                            <div className='d-flex justify-content-start align-items-center my-2'>
-                                <label className='ml-2'>
-                                    <Controller
-                                        name='rememberMe'
-                                        control={control}
-                                        defaultValue={false}
-                                        render={({field}) => (
-                                            <>
-                                                <input {...field} type='checkbox'/>
-                                                Remember me
-                                            </>
-                                        )}
-                                    />
-                                </label>
-                            </div>
-
-                            <button
-                                className='w-100 btn btn-lg btn btn-success mt-2'
-                                type='submit'
-                                disabled={isLoading}
-                            >
-                                {isLoading ? (
-                                    <CgSpinner className='animate-spin' size={30}/>
-                                ) : (
-                                    "Login"
-                                )}
-                            </button>
-                            <hr/>
-                            <div className='Support-service'>
-                                <p>Support service: +998 94 121-00-41</p>
-                            </div>
-                        </div>
-                    </form>
-                </div>
-            </div>
-        </div>
+                            <div className="flex items-center justify-between">
+                                <div className="flex items-start">
+                                    <div className="flex items-center h-5">
+                                        <Controller
+                                            name='rememberMe'
+                                            control={control}
+                                            defaultValue={false}
+                                            render={({field}) => (
+                                                <>
+                                                    <input {...field}
+                                                           className="w-4 h-4 border border-gray-300 rounded bg-gray-50 focus:ring-3 focus:ring-primary-300 dark:bg-gray-700 dark:border-gray-600 dark:focus:ring-primary-600 dark:ring-offset-gray-800"
+                                                           id={"rememberMe"}
+                                                           type='checkbox'/>
+                                                </>
+                                            )}
+                                        />
+                                    </div>
+                                    <div className="ml-3 text-sm">
+                                        <label htmlFor="rememberMe" className="text-gray-500 dark:text-gray-300">Remember
+                                            me</label>
+                                    </div>
+                                </div>
+                            </div>
+                            <button type="submit"
+                                    className="w-full text-white bg-blue-600  hover:bg-primary-700 focus:ring-4 focus:outline-none focus:ring-primary-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800">
+                                Sign in
+                            </button>
+                            <p className="text-sm font-light text-gray-500 dark:text-gray-400">
+                                Don’t have an account yet? <a href="#"
+                                                              className="font-medium text-blue-500 hover:underline dark:text-primary-500">Sign
+                                up</a>
+                            </p>
+                        </form>
+                    </div>
+                </div>
+            </div>
+        </section>
     );
 }
 
Index: frontend/src/redux/sagas/LoginSaga.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { call, put, takeLatest } from \"redux-saga/effects\";\r\nimport {\r\n  signUserStart,\r\n  UserFailure,\r\n  UserLogIn,\r\n  UserSuccess\r\n} from \"../reducers/LoginSlice\";\r\nimport axios from \"axios\";\r\nfunction* workLoginUser(action) {\r\n  try {\r\n    console.log(\"Hello\")\r\n    yield put(signUserStart());\r\n    const response = yield call(() =>\r\n        axios.post(\r\n            \"http://localhost:8080/api/v1/auth/login\",\r\n            action.payload.formData\r\n        )\r\n    );\r\n    localStorage.removeItem(\"access_token\");\r\n    localStorage.removeItem(\"refresh_token\");\r\n    if (response.data.refresh_token) {\r\n      localStorage.setItem(\"access_token\", response.data.access_token);\r\n      localStorage.setItem(\"refresh_token\", response.data.refresh_token);\r\n    } else {\r\n      localStorage.setItem(\"access_token\", response.data.access_token);\r\n    }\r\n    yield put(UserSuccess());\r\n    if (response.data.roles[0].name === \"ROLE_SUPER_ADMIN\") {\r\n      action.payload.navigate(\"/admin\");\r\n    }\r\n  } catch (error) {\r\n    if (error.response.status === 401 || error.status.status === 403) {\r\n      yield put(UserFailure(\"Login or password is wrong\"));\r\n    }\r\n  }\r\n}\r\n\r\nexport default function* loginSaga() {\r\n  yield takeLatest(UserLogIn.type, workLoginUser);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/redux/sagas/LoginSaga.js b/frontend/src/redux/sagas/LoginSaga.js
--- a/frontend/src/redux/sagas/LoginSaga.js	
+++ b/frontend/src/redux/sagas/LoginSaga.js	
@@ -1,40 +1,40 @@
-import { call, put, takeLatest } from "redux-saga/effects";
+import {call, put, takeLatest} from "redux-saga/effects";
 import {
-  signUserStart,
-  UserFailure,
-  UserLogIn,
-  UserSuccess
+    signUserStart,
+    UserFailure,
+    UserLogIn,
+    UserSuccess
 } from "../reducers/LoginSlice";
 import axios from "axios";
+
 function* workLoginUser(action) {
-  try {
-    console.log("Hello")
-    yield put(signUserStart());
-    const response = yield call(() =>
-        axios.post(
-            "http://localhost:8080/api/v1/auth/login",
-            action.payload.formData
-        )
-    );
-    localStorage.removeItem("access_token");
-    localStorage.removeItem("refresh_token");
-    if (response.data.refresh_token) {
-      localStorage.setItem("access_token", response.data.access_token);
-      localStorage.setItem("refresh_token", response.data.refresh_token);
-    } else {
-      localStorage.setItem("access_token", response.data.access_token);
-    }
-    yield put(UserSuccess());
-    if (response.data.roles[0].name === "ROLE_SUPER_ADMIN") {
-      action.payload.navigate("/admin");
-    }
-  } catch (error) {
-    if (error.response.status === 401 || error.status.status === 403) {
-      yield put(UserFailure("Login or password is wrong"));
-    }
-  }
+    try {
+        yield put(signUserStart());
+        const response = yield call(() =>
+            axios.post(
+                "http://localhost:8080/api/v1/auth/login",
+                action.payload.formData
+            )
+        );
+        localStorage.removeItem("access_token");
+        localStorage.removeItem("refresh_token");
+        if (response.data.refresh_token) {
+            localStorage.setItem("access_token", response.data.access_token);
+            localStorage.setItem("refresh_token", response.data.refresh_token);
+        } else {
+            localStorage.setItem("access_token", response.data.access_token);
+        }
+        yield put(UserSuccess());
+        if (response.data.roles[0].name === "ROLE_SUPER_ADMIN") {
+            action.payload.navigate("/admin");
+        }
+    } catch (error) {
+        if (error.response.status === 401 || error.status.status === 403) {
+            yield put(UserFailure("Login or password is wrong"));
+        }
+    }
 }
 
 export default function* loginSaga() {
-  yield takeLatest(UserLogIn.type, workLoginUser);
+    yield takeLatest(UserLogIn.type, workLoginUser);
 }
Index: backend/src/main/java/com/example/backend/Config/AutoRun.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.backend.Config;\r\n\r\n\r\nimport com.example.backend.entity.Role;\r\nimport com.example.backend.entity.User;\r\nimport com.example.backend.enums.UserRoles;\r\nimport com.example.backend.repository.RoleRepository;\r\nimport com.example.backend.repository.UserRepository;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.boot.CommandLineRunner;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.security.crypto.password.PasswordEncoder;\r\n\r\n\r\nimport java.util.ArrayList;\r\n\r\nimport java.util.List;\r\nimport java.util.Optional;\r\n\r\n@Configuration\r\n@RequiredArgsConstructor\r\npublic class AutoRun implements CommandLineRunner {\r\n\r\n    private final RoleRepository roleRepo;\r\n    private final UserRepository userRepo;\r\n    private final PasswordEncoder passwordEncoder;\r\n\r\n\r\n    @Override\r\n    public void run(String... args) throws Exception {\r\n        String adminPhone = \"+998999999999\";\r\n        List<Role> savedRoles = saveRoles();\r\n        Optional<User> userByPhone = userRepo.findByPhone(adminPhone);\r\n        saveUser(adminPhone, userByPhone);\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    private void saveUser(String adminPhone, Optional<User> userByPhone) {\r\n        if (userByPhone.isEmpty()) {\r\n            User user = User.builder()\r\n                    .phone(adminPhone)\r\n                    .password(passwordEncoder.encode(\"00000000\"))\r\n                    .roles(List.of(roleRepo.findByName(UserRoles.ROLE_SUPER_ADMIN)))\r\n                    .build();\r\n            userRepo.save(user);\r\n\r\n\r\n        }\r\n    }\r\n\r\n    private List<Role> saveRoles() {\r\n        return roleRepo.saveAll(new ArrayList<>(List.of(\r\n                new Role(1, UserRoles.ROLE_ADMIN),\r\n                new Role(2, UserRoles.ROLE_USER),\r\n                new Role(3, UserRoles.ROLE_OPERATOR),\r\n                new Role(4, UserRoles.ROLE_SUPER_ADMIN))));\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/com/example/backend/Config/AutoRun.java b/backend/src/main/java/com/example/backend/Config/AutoRun.java
--- a/backend/src/main/java/com/example/backend/Config/AutoRun.java	
+++ b/backend/src/main/java/com/example/backend/Config/AutoRun.java	
@@ -20,9 +20,8 @@
 @Configuration
 @RequiredArgsConstructor
 public class AutoRun implements CommandLineRunner {
-
-    private final RoleRepository roleRepo;
-    private final UserRepository userRepo;
+    private final UserRepository userRepository;
+    private final RoleRepository roleRepository;
     private final PasswordEncoder passwordEncoder;
 
 
@@ -30,29 +29,27 @@
     public void run(String... args) throws Exception {
         String adminPhone = "+998999999999";
         List<Role> savedRoles = saveRoles();
-        Optional<User> userByPhone = userRepo.findByPhone(adminPhone);
+        Optional<User> userByPhone = userRepository.findByPhone(adminPhone);
         saveUser(adminPhone, userByPhone);
 
     }
 
 
-
-
     private void saveUser(String adminPhone, Optional<User> userByPhone) {
         if (userByPhone.isEmpty()) {
             User user = User.builder()
                     .phone(adminPhone)
                     .password(passwordEncoder.encode("00000000"))
-                    .roles(List.of(roleRepo.findByName(UserRoles.ROLE_SUPER_ADMIN)))
+                    .roles(List.of(roleRepository.findByName(UserRoles.ROLE_SUPER_ADMIN)))
                     .build();
-            userRepo.save(user);
+            userRepository.save(user);
 
 
         }
     }
 
     private List<Role> saveRoles() {
-        return roleRepo.saveAll(new ArrayList<>(List.of(
+        return roleRepository.saveAll(new ArrayList<>(List.of(
                 new Role(1, UserRoles.ROLE_ADMIN),
                 new Role(2, UserRoles.ROLE_USER),
                 new Role(3, UserRoles.ROLE_OPERATOR),
Index: frontend/src/App.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useEffect, useCallback } from \"react\";\r\nimport Login from \"./components/Login/index\";\r\nimport { Route, Routes, useLocation } from \"react-router-dom\";\r\nimport \"./components/Login/index.css\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport instance from \"./components/utils/config/instance\";\r\nimport ErrorPage from \"./components/404/ErrorPage\";\r\nimport Home from './components/home/Home';\r\nimport AdminHome from './components/admin/Admin'\r\n\r\n\r\nimport {useDispatch} from \"react-redux\";\r\nimport AdminBarnd from \"./components/admin/adminBrand/AdminBarnd\";\r\nimport AdminAdmins from \"./components/admin/adminAdmins/AdminAdmins\";\r\nimport AdminOperators from \"./components/admin/adminOperators/AdminOperators\";\r\nimport AdminCar from \"./components/admin/adminCar/AdminCar\";\r\nimport AdminCarPart from \"./components/admin/adminCarPart/AdminCarPart\";\r\nimport AdminProduct from \"./components/admin/adminProduct/AdminProduct\";\r\nfunction App() {\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    const blockedPages = [\"/dashboard\"];\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    const dispatch = useDispatch()\r\n\r\n    // const checkSecurity = useCallback(async () => {\r\n    //     dispatch(setPageSize(5))\r\n    //     if (blockedPages.some((blockedPage) => location.pathname.startsWith(blockedPage))) {\r\n    //         let accessToken = localStorage.getItem(\"access_token\");\r\n    //         if (accessToken !== null) {\r\n    //             try {\r\n    //                 const res = await instance(\"/api/v1/security\", \"GET\");\r\n    //                 if (res?.data !== 401 && res?.error) {\r\n    //                     if (res?.data[0].name !== \"ROLE_SUPER_ADMIN\") {\r\n    //                         navigate(\"/404\");\r\n    //                     }\r\n    //                 }\r\n    //             } catch (error) {\r\n    //                 navigate(\"/\");\r\n    //             }\r\n    //         } else {\r\n    //             navigate(\"/\");\r\n    //         }\r\n    //     }\r\n    // }, [blockedPages, location.pathname, navigate]);\r\n    // useEffect(() => {\r\n    //     dispatch(setPageSize(5))\r\n    //     checkSecurity();\r\n    //\r\n    //     const handleStorageChange = (event) => {\r\n    //         if (!localStorage.getItem(\"access_token\")) {\r\n    //             navigate(\"/\");\r\n    //         } else {\r\n    //             checkSecurity();\r\n    //         }\r\n    //     };\r\n    //     window.addEventListener(\"storage\", handleStorageChange);\r\n    //\r\n    //     const handleBeforeUnload = () => {\r\n    //         handleStorageChange();\r\n    //     };\r\n    //     window.addEventListener(\"beforeunload\", handleBeforeUnload);\r\n    //\r\n    //     return () => {\r\n    //         window.removeEventListener(\"storage\", handleStorageChange);\r\n    //         window.removeEventListener(\"beforeunload\", handleBeforeUnload);\r\n    //     };\r\n    // }, [checkSecurity, navigate]);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Routes>\r\n                <Route path=\"/login\" element={<Login />} />\r\n                <Route path={\"/admin\"} element={<AdminHome/>} >\r\n                    <Route path={\"/admin/brand\"} element={<AdminBarnd />}/>\r\n                    <Route path={\"/admin/admins\"} element={<AdminAdmins />}/>\r\n                    <Route path={\"/admin/operators\"} element={<AdminOperators />}/>\r\n                    <Route path={\"/admin/car\"} element={<AdminCar />}/>\r\n                    <Route path={\"/admin/part\"} element={<AdminCarPart />}/>\r\n                    <Route path={\"/admin/product\"} element={<AdminProduct />}/>\r\n\r\n                </Route>\r\n\r\n                <Route path=\"/\" element={<Home />}/>\r\n\r\n\r\n                <Route path=\"*\" element={<ErrorPage />} />\r\n            </Routes>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/App.js b/frontend/src/App.js
--- a/frontend/src/App.js	
+++ b/frontend/src/App.js	
@@ -1,10 +1,10 @@
-import React, { useEffect, useCallback } from "react";
+import React, {useEffect, useCallback} from "react";
 import Login from "./components/Login/index";
-import { Route, Routes, useLocation } from "react-router-dom";
+import {Route, Routes, useLocation} from "react-router-dom";
 import "./components/Login/index.css";
 import "react-toastify/dist/ReactToastify.css";
 
-import { useNavigate } from "react-router-dom";
+import {useNavigate} from "react-router-dom";
 import instance from "./components/utils/config/instance";
 import ErrorPage from "./components/404/ErrorPage";
 import Home from './components/home/Home';
@@ -18,6 +18,7 @@
 import AdminCar from "./components/admin/adminCar/AdminCar";
 import AdminCarPart from "./components/admin/adminCarPart/AdminCarPart";
 import AdminProduct from "./components/admin/adminProduct/AdminProduct";
+
 function App() {
     // eslint-disable-next-line react-hooks/exhaustive-deps
     const blockedPages = ["/dashboard"];
@@ -72,21 +73,17 @@
     return (
         <div className="App">
             <Routes>
-                <Route path="/login" element={<Login />} />
-                <Route path={"/admin"} element={<AdminHome/>} >
-                    <Route path={"/admin/brand"} element={<AdminBarnd />}/>
-                    <Route path={"/admin/admins"} element={<AdminAdmins />}/>
-                    <Route path={"/admin/operators"} element={<AdminOperators />}/>
-                    <Route path={"/admin/car"} element={<AdminCar />}/>
-                    <Route path={"/admin/part"} element={<AdminCarPart />}/>
-                    <Route path={"/admin/product"} element={<AdminProduct />}/>
-
+                <Route path="/login" element={<Login/>}/>
+                <Route path={"/admin"} element={<AdminHome/>}>
+                    <Route path={"/admin/brand"} element={<AdminBarnd/>}/>
+                    <Route path={"/admin/admins"} element={<AdminAdmins/>}/>
+                    <Route path={"/admin/operators"} element={<AdminOperators/>}/>
+                    <Route path={"/admin/car"} element={<AdminCar/>}/>
+                    <Route path={"/admin/part"} element={<AdminCarPart/>}/>
+                    <Route path={"/admin/product"} element={<AdminProduct/>}/>
                 </Route>
-
-                <Route path="/" element={<Home />}/>
-
-
-                <Route path="*" element={<ErrorPage />} />
+                <Route path="/" element={<Home/>}/>
+                <Route path="*" element={<ErrorPage/>}/>
             </Routes>
         </div>
     );
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"CompilerConfiguration\">\r\n    <annotationProcessing>\r\n      <profile name=\"Maven default annotation processors profile\" enabled=\"true\">\r\n        <sourceOutputDir name=\"target/generated-sources/annotations\" />\r\n        <sourceTestOutputDir name=\"target/generated-test-sources/test-annotations\" />\r\n        <outputRelativeToContentRoot value=\"true\" />\r\n        <module name=\"backend\" />\r\n      </profile>\r\n    </annotationProcessing>\r\n  </component>\r\n  <component name=\"JavacSettings\">\r\n    <option name=\"ADDITIONAL_OPTIONS_OVERRIDE\">\r\n      <module name=\"backend\" options=\"-parameters\" />\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/compiler.xml b/.idea/compiler.xml
--- a/.idea/compiler.xml	
+++ b/.idea/compiler.xml	
@@ -2,6 +2,7 @@
 <project version="4">
   <component name="CompilerConfiguration">
     <annotationProcessing>
+      <profile default="true" name="Default" enabled="true" />
       <profile name="Maven default annotation processors profile" enabled="true">
         <sourceOutputDir name="target/generated-sources/annotations" />
         <sourceTestOutputDir name="target/generated-test-sources/test-annotations" />
Index: frontend/src/components/Login/index.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>.Login-box {\r\n    position: relative;\r\n    margin: 70px auto;\r\n    border-radius: 10px;\r\n    max-width: 370px;\r\n    min-height: 540px;\r\n    box-shadow: 0px 0px 39px -3px rgba(34, 60, 80, 0.2);\r\n}\r\n\r\n.shiftLogo {\r\n    width: 100px;\r\n    height: 100px;\r\n    border-radius: 50%;\r\n    position: absolute;\r\n    top: -50px;\r\n    left: 125px;\r\n}\r\n\r\n.information {\r\n    padding: 10px;\r\n    border: 1px solid greenyellow;\r\n    font-size: 15px;\r\n    text-align: start;\r\n    background-color: rgb(197, 244, 214);\r\n}\r\n\r\n.body {\r\n    padding: 10px;\r\n    position: absolute;\r\n    width: 100%;\r\n    text-align: center;\r\n    top: 70px;\r\n}\r\n\r\n.Support-service {\r\n    text-align: start;\r\n    font-size: small;\r\n    color: gray;\r\n}\r\n\r\n.error-message {\r\n    color: red;\r\n    font-size: 12px;\r\n    text-align: start;\r\n}\r\n\r\n.custom-phone-input {\r\n    outline-color: green;\r\n    box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\r\n    color: #4a5568;\r\n    border: 1px solid #cbd5e0;\r\n    border-radius: 0.25rem;\r\n    line-height: 1.25;\r\n}\r\n@keyframes spin {\r\n    0% {\r\n        transform: rotate(0deg);\r\n    }\r\n\r\n    100% {\r\n        transform: rotate(360deg);\r\n    }\r\n}\r\n\r\n.animate-spin {\r\n    animation: spin 1s linear infinite;\r\n}\r\n\r\n.PhoneInputCountryIconImg {\r\n    width: 40px;\r\n}\r\n\r\n.PhoneInputCountry {\r\n    height: 100%;\r\n}\r\n\r\n.PhoneInputCountrySelect {\r\n    display: none;\r\n}\r\n\r\n.PhoneInput {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    gap: 5px;\r\n}\r\n\r\n.PhoneInputInput {\r\n    display: block;\r\n    width: 100%;\r\n    height: calc(1.5em + 0.75rem + 2px);\r\n    padding: 0.375rem 0.75rem;\r\n    font-size: 1rem;\r\n    font-weight: 400;\r\n    line-height: 1.5;\r\n    color: #495057;\r\n    background-color: #fff;\r\n    background-clip: padding-box;\r\n    border: 1px solid #ced4da;\r\n    border-radius: 0.25rem;\r\n    transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\r\n    margin-top: 0.25rem;\r\n    margin-bottom: 0.25rem;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/components/Login/index.css b/frontend/src/components/Login/index.css
--- a/frontend/src/components/Login/index.css	
+++ b/frontend/src/components/Login/index.css	
@@ -13,7 +13,7 @@
     border-radius: 50%;
     position: absolute;
     top: -50px;
-    left: 125px;
+    left: 135px;
 }
 
 .information {
Index: frontend/src/components/admin/Sidebar/SidebarContent.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React from 'react'\r\nimport * as Icons from './icons'\r\nimport {Link, NavLink, Route, useLocation} from \"react-router-dom\";\r\n\r\nfunction Icon({ icon, ...props }) {\r\n    const Icon = Icons[icon]\r\n    return <Icon {...props} />\r\n}\r\n\r\nfunction SidebarContent() {\r\n    const location = useLocation();\r\n\r\n    const routes = [\r\n        {\r\n            path: '/admin/brand', // the url\r\n            icon: 'CardsIcon', // the component being exported from icons/index.js\r\n            name: 'Brand', // name that appear in Sidebar\r\n        },\r\n        {\r\n            path: '/admin/part',\r\n            icon: 'OutlineCogIcon',\r\n            name: 'Car part',\r\n        },\r\n        {\r\n            path: '/admin/car',\r\n            icon: 'ChartsIcon',\r\n            name: 'Car',\r\n        },\r\n        {\r\n            path: '/admin/product',\r\n            icon: 'PagesIcon',\r\n            name: 'Product',\r\n        },\r\n        {\r\n            path: '/admin/admins',\r\n            icon: 'PeopleIcon',\r\n            name: 'Admins',\r\n        },\r\n        {\r\n            path: '/admin/operators',\r\n            icon: 'PeopleIcon',\r\n            name: 'Operators',\r\n        },\r\n\r\n    ]\r\n    return (\r\n        <div className=\"py-4 text-gray-500 text-gray-400\">\r\n            <Link to={'/admin'} className=\"ml-6 text-lg font-bold text-white\" >\r\n                Project Name\r\n            </Link>\r\n            <ul className=\"mt-6\">\r\n                {routes.map((route) =>\r\n                    <li className=\"relative px-6 py-3\" key={route.name}>\r\n                        <NavLink\r\n                            exact\r\n                            to={route.path}\r\n                            className=\"inline-flex items-center w-full text-sm font-semibold transition-colors duration-150 hover:text-white\"\r\n                            activeClassName=\"text-gray-800 text-gray-100\"\r\n                        >\r\n                            {location.pathname===route.path?<span\r\n                                className=\"absolute inset-y-0 left-0 w-1 bg-purple-600 rounded-tr-lg rounded-br-lg\"\r\n                                aria-hidden=\"true\"\r\n                            ></span>:\"\"}\r\n\r\n                            <Icon className=\"w-5 h-5\" aria-hidden=\"true\" icon={route.icon} />\r\n                            <span className=\"ml-4\">{route.name}</span>\r\n                        </NavLink>\r\n                    </li>\r\n                )}\r\n\r\n            </ul>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SidebarContent
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/components/admin/Sidebar/SidebarContent.js b/frontend/src/components/admin/Sidebar/SidebarContent.js
--- a/frontend/src/components/admin/Sidebar/SidebarContent.js	
+++ b/frontend/src/components/admin/Sidebar/SidebarContent.js	
@@ -2,7 +2,7 @@
 import * as Icons from './icons'
 import {Link, NavLink, Route, useLocation} from "react-router-dom";
 
-function Icon({ icon, ...props }) {
+function Icon({icon, ...props}) {
     const Icon = Icons[icon]
     return <Icon {...props} />
 }
@@ -45,7 +45,7 @@
     ]
     return (
         <div className="py-4 text-gray-500 text-gray-400">
-            <Link to={'/admin'} className="ml-6 text-lg font-bold text-white" >
+            <Link to={'/admin'} className="ml-6 text-lg font-bold text-white">
                 Project Name
             </Link>
             <ul className="mt-6">
@@ -57,12 +57,12 @@
                             className="inline-flex items-center w-full text-sm font-semibold transition-colors duration-150 hover:text-white"
                             activeClassName="text-gray-800 text-gray-100"
                         >
-                            {location.pathname===route.path?<span
+                            {location.pathname === route.path ? <span
                                 className="absolute inset-y-0 left-0 w-1 bg-purple-600 rounded-tr-lg rounded-br-lg"
                                 aria-hidden="true"
-                            ></span>:""}
+                            ></span> : ""}
 
-                            <Icon className="w-5 h-5" aria-hidden="true" icon={route.icon} />
+                            <Icon className="w-5 h-5" aria-hidden="true" icon={route.icon}/>
                             <span className="ml-4">{route.name}</span>
                         </NavLink>
                     </li>
